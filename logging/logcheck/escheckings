#!/bin/bash
# check the es status and resource
checktype=$1
logging_namespace=${2:-openshift-logging}
oc project $logging_namespace

es_master_pod1=$(oc get pods --selector component=elasticsearch -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
if [ -z ${es_master_pod1} ]; then
   es_master_pod1=$(oc get pods --selector component=es -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
   if [ -z ${es_master_pod1} ]; then
       echo "No running ES master pod!"
       exit
   fi
fi

es_service=$(oc get service elasticsearch -o jsonpath={.spec.clusterIP})
if [ -z ${es_service} ]; then
     es_service=$(oc get service logging-es -o jsonpath={.spec.clusterIP})
fi
function es_run()
{
     es_run_util $*
}
function es_run_util()
{
    oc exec -c elasticsearch $es_master_pod1 -- es_util --query=$*
}

function es_run_curl()
{
    oc exec -c elasticsearch $es_master_pod1 -- curl -s -XGET --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key https://logging-es:9200/$*
}

function es_run_service()
{
     if [[ "X$exec_pod" ==  "X" ]]; then
	exec_pod1=$(oc get pods --selector logging-infra=fluentd -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
     fi

     if [[ "X$token" ==  "X" ]]; then
        token=$(oc whoami -t)
     fi

     oc exec $exec_pod -- curl -kv -H 'X-Forwarded-For: 127.0.0.1' -H "Authorization: Bearer $token" https://$es_service:9200/$*

}

function es_run_router()
{
      echo "Todo"
}

function get_docs()
{
    cur_pod_name=$1
    cur_index_name=$2
    get_in_es $cur_pod_name ${cur_index_name}*/_count?pretty
}



function search_docs()
{   
    #No space in json string
    cur_pod_name=$1
    cur_index_name=$2
    cur_key=$3
    cur_value=$4
    get_in_es ${cur_pod_name} ${cur_index_name}*/_count?pretty -d '{ "query" : { "match" : { "${cur_key}" : "${cur_value}" } } }'

}

######################Main#################################################

set -x
echo "-->1. check Elasticsearch Cluster Status  --< "
oc exec -c elasticsearch $es_master_pod1 -- es_cluster_health

echo "-->2. List Shards status"
es_run _cat/shards

if [[ "$checktype" == "1" ]] ;then
	exit 0
fi

echo "-->3. list index  --< "
es_run _cat/indices?v

echo "-->4. Token access checkin --< "
es_run_service "_cat/shards"

echo "-->5. list aliases  --< "
es_run _aliases?pretty

echo "-->6. check if there system logs for all nodes --< "
es_run _search?size=0 -H 'Content-Type:application/json' -d '{"aggs":{"exists_field_kubernetes":{"filter":{"exists":{"field":"systemd"}},"aggs":{"distinct_hostname_name":{"terms":{"field":"hostname"}}}}}}' |python -m json.tool
echo ""

echo "-->7. check if there container logs for all nodes --< "
es_run _search?size=0 -H 'Content-Type:application/json' -d '{"aggs":{"exists_field_kubernetes":{"filter":{"exists":{"field":"kubernetes"}},"aggs":{"distinct_hostname_name":{"terms":{"field":"hostname"}}}}}}' |python -m json.tool
echo ""

oc get nodes

if [[ "$checktype" == "2" ]] ;then
    #echo "-->5. check if there are logs for all pods --< "
    #pods=$(oc get pods --output=name)
    #for pod in $nodes; do
    #    node_name=${node#*\/}
    #    es_run .operations*/_count?pretty -d '{ "query" : { "match" : { "hostname":"$node_name"}}}'
    #done

    echo "-->5. List ES swallow status "
    es_run _cat/thread_pool?v\&h=host,bulk.completed,bulk.rejected,bulk.queue,bulk.active,bulk.queueSize

    echo "-->6. list the index number of .operations --< "
    es_run .operations*/_settings?pretty

    echo "-->7 get .orphaned index setting--< "
    es_run .orphaned*/_settings?pretty



    echo "-->5. check if there are event router documents --< "
    es_run .operations*/_count?pretty -d '{ "query" : { "match" : { "kubernetes.event.verb":"created"}}}'

    #echo "-->6. check if there are docker event router documents --< "
    #es_run .operations*/_count?pretty -d '{ "query" : { "match" : { "docker.event.verb":"created"}}}'
fi
